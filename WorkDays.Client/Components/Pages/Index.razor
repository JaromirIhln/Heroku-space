@page "/"
@using WorkDays.Client.Models
@using System.Linq
@inject HttpClient Http

<!-- Navbar přesunut do Layoutu -->

<div class="d-flex justify-content-between align-items-center shadow-lg p-2 mb-2 mt-2 bg-body rounded ms-2 me-2">
    <button class="btn btn-outline-secondary btn-sm" @onclick="ShowPreviousWeek"><span class="fa fa-chevron-left"></span></button>
    <h3 class="text-center m-0">@CurrentMonthName <span class="ms-3 fa fa-calendar"></span></h3>
    <button class="btn btn-outline-secondary btn-sm" @onclick="ShowNextWeek"><span class="fa fa-chevron-right"></span></button>
</div>
<div class="mb-3 d-flex align-items-center ms-2 me-2">
    <a class="btn btn-success btn-sm shadow p-2 mt-2 rounded me-3" href="/create">Nový <span class="fa fa-calendar-plus-o"></span></a>
</div>
@if (!string.IsNullOrEmpty(logMessage))
{
    <div class="alert alert-info ms-2 me-2">
        <p>@logMessage</p>
        <i class="fa fa-spinner fa-spin" ></i>
    </div>
}
@if (workDays == null)
{
    <i class="fa fa-spinner fa-spin style="font-size:32px""></i>
}
else
{
    <table class="table table-striped table-success table-bordered shadow-lg bg-light ms-2 me-2 rounded table-hover table-responsive table-sm">
        <thead>
            <tr class="text-center ms-2 text-bg-info">
                <th class="px-2">Den</th>
                <th class="px-2">Začátek</th>
                <th class="px-2">Konec</th>
                <th class="px-2">Celkem</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var day in FilteredWeekDays)
            {
                var isWeekend = day.Date.DayOfWeek == DayOfWeek.Saturday || day.Date.DayOfWeek == DayOfWeek.Sunday;
                var isHoliday = day.IsHoliday;
                var rowClass = isHoliday
                    ? "table-danger"
                    : isWeekend
                        ? "table-warning"
                        : "table-info";

                <tr class="text-center ms-2 @rowClass clickable-row" style="cursor:pointer;" @onclick="@(() => GoToDetail(day.WorkDayId))">
                    <td class="px-2">@(System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetDayName(day.Date.DayOfWeek))  @day.Date.ToString("d")</td>
                    <td class="px-2"><span class="badge bg-primary">@day.StartTime</span></td>
                    <td class="px-2"><span class="badge bg-success">@day.EndTime</span></td>
                    <td class="px-2"><span class="badge bg-info text-dark">@day.TotalHours</span></td>
                </tr>
            }
        </tbody>
    </table>
}
@code {
    private List<WorkDayDto>? workDays;
    private string? logMessage;


    private int weekOffset = 0; // 0 = aktuální týden, -1 = předchozí, +1 = další



    [CascadingParameter]
    public string? globalSearch { get; set; }

    private IEnumerable<WorkDayDto> CurrentWeekDays =>
        workDays == null ? Enumerable.Empty<WorkDayDto>() :
        workDays.Where(d => d.Date >= StartOfWeek && d.Date <= EndOfWeek);

    private IEnumerable<WorkDayDto> FilteredWeekDays =>
        string.IsNullOrWhiteSpace(globalSearch)
            ? CurrentWeekDays
            : CurrentWeekDays.Where(d =>
                System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetDayName(d.Date.DayOfWeek).StartsWith(globalSearch, StringComparison.OrdinalIgnoreCase)
                || d.Date.ToString("d").Contains(globalSearch)
                || d.StartTime.ToString().Contains(globalSearch)
                || d.EndTime.ToString().Contains(globalSearch)
                || d.TotalHours.ToString().Contains(globalSearch)
            );

    private DateTime StartOfWeek =>
        DateTime.Today.AddDays(7 * weekOffset - (int)DateTime.Today.DayOfWeek + 1); // pondělí
    private DateTime EndOfWeek => StartOfWeek.AddDays(6);

    private string CurrentMonthName =>
        System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(StartOfWeek.Month) + " " + StartOfWeek.Year;

    private void ShowPreviousWeek() { weekOffset--; }
    private void ShowNextWeek() { weekOffset++; }

    private void GoToDetail(int workDayId)
    {
        NavigationManager.NavigateTo($"/detail/{workDayId}");
    }

    [Inject]
    private NavigationManager NavigationManager { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        var requestUrl = new Uri(Http.BaseAddress!, "api/workday").ToString();
        logMessage = $"Awakening: {requestUrl}";

        workDays = await Http.GetFromJsonAsync<List<WorkDayDto>>("api/workday");
        if (workDays != null)
        {
            workDays = workDays.OrderBy(d => d.Date).ToList();
        }
        else
        {
            logMessage += "<br/>Chyba: Data se nepodařilo načíst nebo deserializovat.";
        }
    }
}
